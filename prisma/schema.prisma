generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts        Account[]
  sessions        Session[]
  Workspace       Workspace[]
  WorkspaceMember WorkspaceMember[]
  BoardUser       BoardUser[]
  TaskComment     TaskComment[]
  TaskAssignee    TaskAssignee[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String    @unique @default(cuid())
  name        String    @unique
  description String?
  code        String    @unique @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  userId      String

  User User @relation(fields: [userId], references: [id])

  WorkspaceMember WorkspaceMember[]
  Board           Board[]

  @@id([id])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String  @unique @default(cuid())
  workspaceId String
  userId      String
  isAdmin     Boolean

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("workspace_members")
}

model Board {
  id          String    @unique @default(cuid())
  name        String
  isPublic    Boolean
  workspaceId String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  BoardUser     BoardUser[]
  BoardCategory BoardCategory[]

  @@map("boards")
}

model BoardUser {
  id      String  @unique @default(cuid())
  userId  String
  boardId String
  isAdmin Boolean @default(false)

  user  User  @relation(fields: [userId], references: [id])
  board Board @relation(fields: [boardId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([id])
  @@map("board_users")
}

model BoardCategory {
  id        String    @unique @default(cuid())
  name      String
  boardId   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  board Board  @relation(fields: [boardId], references: [id])
  Task  Task[]

  @@id([id])
  @@map("board_categories")
}

model Task {
  id          String       @unique @default(cuid())
  title       String
  description String?
  categoryId  String
  priority    TaskPriority @default(NOT_SET)
  progress    TaskProgress @default(NOT_STARTED)
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")

  TaskComment  TaskComment[]
  TaskAssignee TaskAssignee[]
  Checklist    Checklist[]

  category BoardCategory @relation(fields: [categoryId], references: [id])

  @@id([id])
  @@map("tasks")
}

model Checklist {
  id        String    @unique @default(cuid())
  taskId    String
  label     String
  isChecked Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  task Task @relation(fields: [taskId], references: [id])

  @@id([id])
  @@map("checklists")
}

model TaskComment {
  id        String    @unique @default(cuid())
  text      String
  userId    String
  taskId    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@id([id])
  @@map("task_comments")
}

model TaskAssignee {
  id        String    @unique @default(cuid())
  userId    String
  taskId    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([id])
  @@map("task_assignees")
}

enum TaskPriority {
  NOT_SET
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskProgress {
  NOT_STARTED
  ON_PROGRESS
  FINISHED
}
